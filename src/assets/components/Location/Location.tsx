import React, { useEffect, useState } from 'react';

const Location: React.FC = () => {
  const [latitude, setLatitude] = useState<number | null>(null);
  const [longitude, setLongitude] = useState<number | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (!navigator.geolocation) {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        setLatitude(position.coords.latitude);
        setLongitude(position.coords.longitude);
      },
      (err) => {
        setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é: ' + err.message);
      }
    );
  }, []);

  return (
    <div>
      {/* <h2>–ü–æ—Ç–æ—á–Ω–∞ –ª–æ–∫–∞—Ü—ñ—è</h2> */}
      <h1>üõ∞Ô∏è –ú–æ—è –ª–æ–∫–∞—Ü—ñ—è</h1>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      {latitude && longitude ? (
        <div>
          <p>–®–∏—Ä–æ—Ç–∞: {latitude}</p>
          <p>–î–æ–≤–≥–æ—Ç–∞: {longitude}</p>
        </div>
      ) : (
        !error && <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó...</p>
      )}
    </div>
  );
};

export default Location;
