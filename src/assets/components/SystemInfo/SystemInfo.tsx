import React, { useEffect, useState } from 'react';
import './SystemInfo.css';

interface BatteryInfo {
    level: number;
    charging: boolean;
}

const SystemInfo: React.FC = () => {
    const [deviceType, setDeviceType] = useState('–Ω–µ–≤—ñ–¥–æ–º–æ');
    const [os, setOS] = useState('–Ω–µ–≤—ñ–¥–æ–º–æ');
    const [browser, setBrowser] = useState('–Ω–µ–≤—ñ–¥–æ–º–æ');
    const [isOnline, setIsOnline] = useState(navigator.onLine);
    const [language] = useState(navigator.language);
    const [timezone, setTimezone] = useState('');
    const [localTime, setLocalTime] = useState('');
    const [screenSize, setScreenSize] = useState(`${window.innerWidth}x${window.innerHeight}`);
    const [connectionType, setConnectionType] = useState('');
    const [battery, setBattery] = useState<BatteryInfo | null>(null);
    const [location, setLocation] = useState<string>('–Ω–µ–≤—ñ–¥–æ–º–æ');

    useEffect(() => {
        const ua = navigator.userAgent;

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø—Ä–∏—Å—Ç—Ä–æ—é
        if (/Mobi|Android/i.test(ua)) setDeviceType('–º–æ–±—ñ–ª—å–Ω–∏–π');
        else if (/Tablet|iPad/i.test(ua)) setDeviceType('–ø–ª–∞–Ω—à–µ—Ç');
        else setDeviceType('–ü–ö');

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –û–°
        if (ua.includes('Windows')) setOS('Windows');
        else if (ua.includes('Mac')) setOS('macOS');
        else if (ua.includes('Android')) setOS('Android');
        else if (ua.includes('iPhone') || ua.includes('iPad')) setOS('iOS');

        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞
        if (ua.includes('Chrome')) setBrowser('Chrome');
        else if (ua.includes('Firefox')) setBrowser('Firefox');
        else if (ua.includes('Safari') && !ua.includes('Chrome')) setBrowser('Safari');
        else if (ua.includes('Edge')) setBrowser('Edge');

        // –ß–∞—Å —ñ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        setLocalTime(new Date().toLocaleTimeString());
        setTimezone(Intl.DateTimeFormat().resolvedOptions().timeZone);

        // –¢–∏–ø –º–µ—Ä–µ–∂—ñ
        const connection = (navigator as any).connection;
        if (connection?.effectiveType) setConnectionType(connection.effectiveType);

        // –ë–∞—Ç–∞—Ä–µ—è
        if ('getBattery' in navigator) {
            (navigator as any).getBattery().then((bat: any) => {
                setBattery({ level: bat.level, charging: bat.charging });
            });
        }

        // –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const { latitude, longitude } = position.coords;
                    setLocation(`${latitude.toFixed(4)}, ${longitude.toFixed(4)}`);
                },
                (error) => {
                    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó:', error);
                    setLocation('–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
                }
            );
        } else {
            setLocation('–Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è');
        }

        // –ü–æ–¥—ñ—ó
        const handleOnline = () => setIsOnline(true);
        const handleOffline = () => setIsOnline(false);
        const handleResize = () => setScreenSize(`${window.innerWidth}x${window.innerHeight}`);

        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);
        window.addEventListener('resize', handleResize);

        return () => {
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    return (
        <div className="system-info">
            <h3>‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h3>
            <ul style={{ listStyle: 'none', paddingLeft: 0 }}>
                <li>üì± –ü—Ä–∏—Å—Ç—Ä—ñ–π: <strong>{deviceType}</strong></li>
                <li>üíª –û–°: <strong>{os}</strong></li>
                <li>üåê –ë—Ä–∞—É–∑–µ—Ä: <strong>{browser}</strong></li>
                <li>üì∂ –ú–µ—Ä–µ–∂–∞: <strong>{isOnline ? '–æ–Ω–ª–∞–π–Ω' : '–æ—Ñ–ª–∞–π–Ω'} {connectionType && `(${connectionType})`}</strong></li>
                <li>üåç –ú–æ–≤–∞: <strong>{language}</strong></li>
                <li>üïì –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: <strong>{timezone}</strong></li>
                <li>üïí –ß–∞—Å: <strong>{localTime}</strong></li>
                <li>üñ•Ô∏è –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: <strong>{screenSize}</strong></li>
                <li>üìç –õ–æ–∫–∞—Ü—ñ—è: <strong>{location}</strong></li>
                {battery && (
                    <li>üîã –ë–∞—Ç–∞—Ä–µ—è: <strong>{Math.round(battery.level * 100)}% {battery.charging ? '(–∑–∞—Ä—è–¥–∫–∞)' : ''}</strong></li>
                )}
            </ul>
        </div>
    );
};

export default SystemInfo;
